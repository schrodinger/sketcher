name: "build-external"
description: "Either builds an external dependency or fetches it from cache"

inputs:
  library:
    description: "Name of the dependency to build"
    required: true
  version:
    description: "Version of the dependency to build"
    required: true

outputs:
  path:
    description: "Path to the installed dependency"
    # FIXME: collapse this with cache-check.path
    value: build/external/${{ inputs.library }}-${{ inputs.version }}

runs:
  using: "composite"
  steps:
    - uses: actions/cache@v4
      id: cache-check
      with:
        path: build/external/${{ inputs.library }}-${{ inputs.version }}
        key: ${{ inputs.library }}-${{ inputs.version }}-${{ runner.os }}-${{ matrix.build-output }}

    - name: Build library
      if: ${{ steps.cache-check.outputs.cache-hit != 'true' }}
      # The Windows Qt build fails if we try to use bash, since it shells out to
      # cmd and doesn't protect the path backslashes from bash
      shell: ${{ runner.os == 'windows' && 'cmd' || 'bash' }}
      # don't put escaped newlines in this command, since it needs to be
      # runnable in both bash and cmd (which uses ^ to escape newlines)
      run: cmake --build build/external/ --target ${{ inputs.library }} --config ${{ env.BUILD_TYPE }}