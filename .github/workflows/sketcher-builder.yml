name: Sketcher Build and Test

on:
  workflow_dispatch: ~
  push: ~
  pull_request: ~
  schedule:
    - cron: "0 4 * * *"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        build-output: [app]
        include:
          - os: ubuntu-latest
            build-output: wasm
          - os: ubuntu-latest
            build-output: memtest
    steps:
      - uses: actions/checkout@v4

      - name: Create and activate virtualenv
        if: matrix.os == 'macos-latest'
        run: |
          python3 -m venv .venv
          source .venv/bin/activate
          echo PATH=$PATH >> $GITHUB_ENV

      - name: Install Python packages
        run: python3 -m pip install ninja clang-format==14.0.6

      - name: Install valgrind
        if: matrix.build-output == 'memtest'
        run: sudo apt-get update && sudo apt-get install valgrind

      - name: Code formatting check
        run: git ls-files | grep -E '\.(cpp|h)$' | xargs clang-format -n --Werror

      - name: Determine build type
        run: echo BUILD_TYPE=${{ matrix.build-output == 'memtest' && 'Debug' || 'Release' }} >> "$GITHUB_ENV"

      - name: Read external/versions.json
        run: |
          {
              echo 'VERSIONS_JSON<<EOF'
              cat external/versions.json
              echo -e '\nEOF'
          } >> "$GITHUB_ENV"

      - name: Fetch emscripten
        if: matrix.build-output == 'wasm'
        uses: ./.github/actions/activate-emsdk
        with:
          version: ${{ fromJson(env.VERSIONS_JSON).emscripten }}

      - name: Add emscripten to PATH
        if: matrix.build-output == 'wasm'
        env:
          VERSION: ${{ fromJson(env.VERSIONS_JSON).emscripten }}
        run: |
            echo "${{ github.workspace }}/build/external/emsdk-${{ env.VERSION }}/emsdk/" >> $GITHUB_PATH && \
            echo "${{ github.workspace }}/build/external/emsdk-${{ env.VERSION }}/emsdk/upstream/emscripten" >> $GITHUB_PATH

      - name: Configure Dependency CMake
        run: |
            ${{ matrix.build-output == 'wasm' && 'emcmake ' || '' }}\
                cmake -B build/external/ -S external/ -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

      - name: Configure host Qt CMake
        if: matrix.build-output == 'wasm'
        run: |
            cmake -B build/external/host/ -S external/ -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DQT_HOST_BUILD=ON

      - name: Fetch fmt
        id: fetch-fmt
        uses: ./.github/actions/build-external
        with:
          library: fmt
          version: ${{ fromJson(env.VERSIONS_JSON).fmt }}

      - name: Fetch zlib
        id: fetch-zlib
        uses: ./.github/actions/build-external
        with:
          library: zlib
          version: ${{ fromJson(env.VERSIONS_JSON).zlib }}

      - name: Fetch zstd
        id: fetch-zstd
        uses: ./.github/actions/build-external
        with:
          library: zstd
          version: ${{ fromJson(env.VERSIONS_JSON).zstd }}

      - name: Fetch Boost
        id: fetch-boost
        uses: ./.github/actions/build-external
        with:
          library: boost
          version: ${{ fromJson(env.VERSIONS_JSON).boost }}

      - name: Fetch Eigen
        id: fetch-eigen
        uses: ./.github/actions/build-external
        with:
          library: eigen
          version: ${{ fromJson(env.VERSIONS_JSON).eigen }}

      - name: Fetch SQLite3
        id: fetch-sqlite
        uses: ./.github/actions/build-external
        with:
          library: sqlite
          version: ${{ fromJson(env.VERSIONS_JSON).sqlite }}

      - name: Fetch RDKit
        id: fetch-rdkit
        uses: ./.github/actions/build-external
        with:
          library: rdkit
          version: ${{ fromJson(env.VERSIONS_JSON).rdkit }}
          # RDKit depends on Boost, so make sure that we rebuild RDKit if Boost
          # has been upgraded
          cache-suffix: -boost-${{ fromJson(env.VERSIONS_JSON).boost }}

      - name: Install Qt's required packages
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install \
            libfontconfig1-dev \
            libfreetype-dev \
            libx11-dev \
            libx11-xcb-dev \
            libxcb-cursor-dev \
            libxcb-glx0-dev \
            libxcb-icccm4-dev \
            libxcb-image0-dev \
            libxcb-keysyms1-dev \
            libxcb-randr0-dev \
            libxcb-render-util0-dev \
            libxcb-shape0-dev \
            libxcb-shm0-dev \
            libxcb-sync-dev \
            libxcb-util-dev \
            libxcb-xfixes0-dev \
            libxcb-xinerama0-dev \
            libxcb-xkb-dev \
            libxcb1-dev \
            libxext-dev \
            libxfixes-dev \
            libxi-dev \
            libxkbcommon-dev \
            libxkbcommon-x11-dev \
            libxrender-dev

      - name: Fetch host Qt
        if: matrix.build-output == 'wasm'
        uses: ./.github/actions/build-external
        with:
          library: qt
          version: ${{ fromJson(env.VERSIONS_JSON).qt }}
          host-build: true

      - name: Fetch Qt
        id: fetch-qt
        uses: ./.github/actions/build-external
        with:
          library: qt
          version: ${{ fromJson(env.VERSIONS_JSON).qt }}

      - name: Configure CMake
        env:
          CMAKE_PREFIX_PATH: "${{ steps.fetch-fmt.outputs.path }};\
                              ${{ steps.fetch-zlib.outputs.path }};\
                              ${{ steps.fetch-zstd.outputs.path }};\
                              ${{ steps.fetch-boost.outputs.path }};\
                              ${{ steps.fetch-eigen.outputs.path }};\
                              ${{ steps.fetch-rdkit.outputs.path }};\
                              ${{ steps.fetch-sqlite.outputs.path }};\
                              ${{ steps.fetch-qt.outputs.path }}"
        run: |
          ${{ matrix.build-output == 'wasm' && 'emcmake ' || '' }}\
          cmake -B build -S . -G Ninja \
                -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
                -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=ON \
                -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH }}"

      - name: Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }}

      - name: Configure Node.js for WASM tests
        if: matrix.build-output == 'wasm'
        # CMake uses Node.js to run the tests on emscripten builds
        uses: actions/setup-node@v4
        with:
          node-version: 22.14.0

      - name: Run tests
        working-directory: build
        if: matrix.build-output != 'memtest'
        # Launching `xvfb-run -a` required for Ubuntu non-wasm builds
        run: |
          ${{ matrix.os == 'ubuntu-latest' && matrix.build-output != 'wasm' && 'xvfb-run -a' || ''}} \
          ctest --build-config ${{ env.BUILD_TYPE }} -LE memtest --output-on-failure --output-junit junit-report.xml

      - name: Run memtests
        working-directory: build
        if: matrix.build-output == 'memtest'
        run: |
          xvfb-run -a ctest --build-config ${{ env.BUILD_TYPE }} -L memtest --output-on-failure --output-junit junit-report.xml

      - name: Publish Test Summary
        uses: test-summary/action@v2
        with:
          paths: "build/junit-report.xml"
        if: always()

      - name: Download sketcher executable
        if: matrix.build-output != 'wasm'
        uses: actions/upload-artifact@v4
        env:
            # ".exe" on Windows, no extension everywhere else
            EXT: ${{matrix.os == 'windows-latest' && '.exe' || ''}}
        with:
          name: sketcher-${{ matrix.os }}-${{ matrix.build-output }}${{env.EXT}}
          path: build/sketcher_app${{env.EXT}}

      - name: Create wasm tarball
        if: matrix.build-output == 'wasm'
        env:
            QT_DIR: ${{ steps.fetch-qt.outputs.path }}
        run: ./wasm/create_wasm_tarball.sh sketcher-wasm

      - name: Download wasm tarball
        if: matrix.build-output == 'wasm'
        uses: actions/upload-artifact@v4
        with:
          name: sketcher-${{ matrix.build-output }}.tar.gz
          path: sketcher-wasm.tar.gz
